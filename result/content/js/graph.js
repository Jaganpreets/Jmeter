/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 67.0, "minX": 0.0, "maxY": 6926.0, "series": [{"data": [[0.0, 297.0], [0.1, 297.0], [0.2, 299.0], [0.3, 299.0], [0.4, 301.0], [0.5, 304.0], [0.6, 304.0], [0.7, 304.0], [0.8, 304.0], [0.9, 305.0], [1.0, 305.0], [1.1, 305.0], [1.2, 306.0], [1.3, 306.0], [1.4, 307.0], [1.5, 308.0], [1.6, 308.0], [1.7, 308.0], [1.8, 309.0], [1.9, 309.0], [2.0, 309.0], [2.1, 309.0], [2.2, 310.0], [2.3, 310.0], [2.4, 310.0], [2.5, 310.0], [2.6, 310.0], [2.7, 310.0], [2.8, 311.0], [2.9, 311.0], [3.0, 311.0], [3.1, 312.0], [3.2, 312.0], [3.3, 312.0], [3.4, 312.0], [3.5, 312.0], [3.6, 313.0], [3.7, 313.0], [3.8, 313.0], [3.9, 313.0], [4.0, 314.0], [4.1, 314.0], [4.2, 314.0], [4.3, 314.0], [4.4, 314.0], [4.5, 315.0], [4.6, 315.0], [4.7, 315.0], [4.8, 315.0], [4.9, 315.0], [5.0, 316.0], [5.1, 316.0], [5.2, 316.0], [5.3, 316.0], [5.4, 316.0], [5.5, 316.0], [5.6, 316.0], [5.7, 316.0], [5.8, 317.0], [5.9, 317.0], [6.0, 317.0], [6.1, 317.0], [6.2, 317.0], [6.3, 317.0], [6.4, 317.0], [6.5, 317.0], [6.6, 317.0], [6.7, 318.0], [6.8, 318.0], [6.9, 318.0], [7.0, 319.0], [7.1, 319.0], [7.2, 319.0], [7.3, 319.0], [7.4, 320.0], [7.5, 320.0], [7.6, 320.0], [7.7, 320.0], [7.8, 321.0], [7.9, 321.0], [8.0, 321.0], [8.1, 321.0], [8.2, 321.0], [8.3, 321.0], [8.4, 321.0], [8.5, 321.0], [8.6, 321.0], [8.7, 322.0], [8.8, 322.0], [8.9, 322.0], [9.0, 322.0], [9.1, 322.0], [9.2, 322.0], [9.3, 322.0], [9.4, 322.0], [9.5, 322.0], [9.6, 322.0], [9.7, 322.0], [9.8, 323.0], [9.9, 323.0], [10.0, 323.0], [10.1, 323.0], [10.2, 323.0], [10.3, 323.0], [10.4, 323.0], [10.5, 323.0], [10.6, 323.0], [10.7, 323.0], [10.8, 324.0], [10.9, 324.0], [11.0, 324.0], [11.1, 325.0], [11.2, 325.0], [11.3, 325.0], [11.4, 325.0], [11.5, 325.0], [11.6, 325.0], [11.7, 325.0], [11.8, 325.0], [11.9, 325.0], [12.0, 325.0], [12.1, 325.0], [12.2, 326.0], [12.3, 326.0], [12.4, 326.0], [12.5, 326.0], [12.6, 327.0], [12.7, 327.0], [12.8, 327.0], [12.9, 327.0], [13.0, 327.0], [13.1, 327.0], [13.2, 327.0], [13.3, 327.0], [13.4, 327.0], [13.5, 327.0], [13.6, 328.0], [13.7, 328.0], [13.8, 328.0], [13.9, 328.0], [14.0, 328.0], [14.1, 328.0], [14.2, 328.0], [14.3, 328.0], [14.4, 328.0], [14.5, 329.0], [14.6, 329.0], [14.7, 329.0], [14.8, 329.0], [14.9, 329.0], [15.0, 329.0], [15.1, 330.0], [15.2, 330.0], [15.3, 330.0], [15.4, 330.0], [15.5, 330.0], [15.6, 330.0], [15.7, 330.0], [15.8, 330.0], [15.9, 331.0], [16.0, 331.0], [16.1, 331.0], [16.2, 331.0], [16.3, 331.0], [16.4, 331.0], [16.5, 331.0], [16.6, 331.0], [16.7, 331.0], [16.8, 331.0], [16.9, 331.0], [17.0, 332.0], [17.1, 332.0], [17.2, 332.0], [17.3, 332.0], [17.4, 332.0], [17.5, 332.0], [17.6, 332.0], [17.7, 333.0], [17.8, 333.0], [17.9, 333.0], [18.0, 333.0], [18.1, 334.0], [18.2, 334.0], [18.3, 334.0], [18.4, 334.0], [18.5, 334.0], [18.6, 334.0], [18.7, 334.0], [18.8, 334.0], [18.9, 334.0], [19.0, 335.0], [19.1, 335.0], [19.2, 335.0], [19.3, 335.0], [19.4, 335.0], [19.5, 335.0], [19.6, 335.0], [19.7, 335.0], [19.8, 335.0], [19.9, 336.0], [20.0, 336.0], [20.1, 336.0], [20.2, 336.0], [20.3, 336.0], [20.4, 336.0], [20.5, 336.0], [20.6, 336.0], [20.7, 336.0], [20.8, 336.0], [20.9, 336.0], [21.0, 337.0], [21.1, 337.0], [21.2, 337.0], [21.3, 337.0], [21.4, 337.0], [21.5, 337.0], [21.6, 337.0], [21.7, 337.0], [21.8, 337.0], [21.9, 337.0], [22.0, 337.0], [22.1, 337.0], [22.2, 337.0], [22.3, 338.0], [22.4, 338.0], [22.5, 338.0], [22.6, 338.0], [22.7, 338.0], [22.8, 338.0], [22.9, 338.0], [23.0, 338.0], [23.1, 339.0], [23.2, 339.0], [23.3, 339.0], [23.4, 339.0], [23.5, 339.0], [23.6, 339.0], [23.7, 339.0], [23.8, 339.0], [23.9, 340.0], [24.0, 340.0], [24.1, 340.0], [24.2, 340.0], [24.3, 340.0], [24.4, 340.0], [24.5, 340.0], [24.6, 340.0], [24.7, 340.0], [24.8, 340.0], [24.9, 341.0], [25.0, 341.0], [25.1, 341.0], [25.2, 341.0], [25.3, 341.0], [25.4, 341.0], [25.5, 341.0], [25.6, 341.0], [25.7, 341.0], [25.8, 342.0], [25.9, 342.0], [26.0, 342.0], [26.1, 342.0], [26.2, 342.0], [26.3, 342.0], [26.4, 342.0], [26.5, 342.0], [26.6, 342.0], [26.7, 342.0], [26.8, 343.0], [26.9, 343.0], [27.0, 343.0], [27.1, 343.0], [27.2, 343.0], [27.3, 343.0], [27.4, 343.0], [27.5, 343.0], [27.6, 343.0], [27.7, 343.0], [27.8, 343.0], [27.9, 344.0], [28.0, 344.0], [28.1, 344.0], [28.2, 344.0], [28.3, 344.0], [28.4, 344.0], [28.5, 344.0], [28.6, 344.0], [28.7, 344.0], [28.8, 344.0], [28.9, 344.0], [29.0, 344.0], [29.1, 344.0], [29.2, 345.0], [29.3, 345.0], [29.4, 345.0], [29.5, 345.0], [29.6, 345.0], [29.7, 345.0], [29.8, 345.0], [29.9, 346.0], [30.0, 346.0], [30.1, 346.0], [30.2, 346.0], [30.3, 346.0], [30.4, 346.0], [30.5, 346.0], [30.6, 346.0], [30.7, 346.0], [30.8, 346.0], [30.9, 346.0], [31.0, 346.0], [31.1, 347.0], [31.2, 347.0], [31.3, 347.0], [31.4, 347.0], [31.5, 347.0], [31.6, 347.0], [31.7, 348.0], [31.8, 348.0], [31.9, 348.0], [32.0, 348.0], [32.1, 348.0], [32.2, 349.0], [32.3, 349.0], [32.4, 349.0], [32.5, 349.0], [32.6, 349.0], [32.7, 350.0], [32.8, 350.0], [32.9, 350.0], [33.0, 350.0], [33.1, 350.0], [33.2, 350.0], [33.3, 351.0], [33.4, 351.0], [33.5, 351.0], [33.6, 351.0], [33.7, 351.0], [33.8, 351.0], [33.9, 352.0], [34.0, 352.0], [34.1, 352.0], [34.2, 352.0], [34.3, 352.0], [34.4, 352.0], [34.5, 353.0], [34.6, 353.0], [34.7, 353.0], [34.8, 353.0], [34.9, 353.0], [35.0, 353.0], [35.1, 354.0], [35.2, 354.0], [35.3, 354.0], [35.4, 354.0], [35.5, 354.0], [35.6, 355.0], [35.7, 355.0], [35.8, 355.0], [35.9, 355.0], [36.0, 355.0], [36.1, 355.0], [36.2, 356.0], [36.3, 356.0], [36.4, 356.0], [36.5, 357.0], [36.6, 357.0], [36.7, 358.0], [36.8, 358.0], [36.9, 359.0], [37.0, 359.0], [37.1, 359.0], [37.2, 359.0], [37.3, 360.0], [37.4, 360.0], [37.5, 360.0], [37.6, 360.0], [37.7, 361.0], [37.8, 361.0], [37.9, 361.0], [38.0, 362.0], [38.1, 362.0], [38.2, 362.0], [38.3, 362.0], [38.4, 362.0], [38.5, 363.0], [38.6, 363.0], [38.7, 363.0], [38.8, 363.0], [38.9, 363.0], [39.0, 364.0], [39.1, 364.0], [39.2, 364.0], [39.3, 364.0], [39.4, 364.0], [39.5, 365.0], [39.6, 365.0], [39.7, 365.0], [39.8, 365.0], [39.9, 366.0], [40.0, 366.0], [40.1, 366.0], [40.2, 367.0], [40.3, 367.0], [40.4, 367.0], [40.5, 367.0], [40.6, 367.0], [40.7, 367.0], [40.8, 367.0], [40.9, 367.0], [41.0, 368.0], [41.1, 368.0], [41.2, 368.0], [41.3, 368.0], [41.4, 368.0], [41.5, 369.0], [41.6, 369.0], [41.7, 369.0], [41.8, 370.0], [41.9, 370.0], [42.0, 370.0], [42.1, 371.0], [42.2, 371.0], [42.3, 371.0], [42.4, 371.0], [42.5, 372.0], [42.6, 373.0], [42.7, 373.0], [42.8, 373.0], [42.9, 373.0], [43.0, 374.0], [43.1, 374.0], [43.2, 374.0], [43.3, 375.0], [43.4, 375.0], [43.5, 376.0], [43.6, 376.0], [43.7, 376.0], [43.8, 377.0], [43.9, 377.0], [44.0, 378.0], [44.1, 378.0], [44.2, 378.0], [44.3, 379.0], [44.4, 380.0], [44.5, 381.0], [44.6, 382.0], [44.7, 382.0], [44.8, 382.0], [44.9, 383.0], [45.0, 383.0], [45.1, 383.0], [45.2, 383.0], [45.3, 383.0], [45.4, 383.0], [45.5, 384.0], [45.6, 384.0], [45.7, 384.0], [45.8, 385.0], [45.9, 385.0], [46.0, 385.0], [46.1, 385.0], [46.2, 386.0], [46.3, 387.0], [46.4, 387.0], [46.5, 387.0], [46.6, 387.0], [46.7, 387.0], [46.8, 387.0], [46.9, 388.0], [47.0, 388.0], [47.1, 388.0], [47.2, 388.0], [47.3, 389.0], [47.4, 389.0], [47.5, 390.0], [47.6, 390.0], [47.7, 390.0], [47.8, 390.0], [47.9, 390.0], [48.0, 391.0], [48.1, 391.0], [48.2, 391.0], [48.3, 391.0], [48.4, 392.0], [48.5, 392.0], [48.6, 392.0], [48.7, 392.0], [48.8, 393.0], [48.9, 394.0], [49.0, 394.0], [49.1, 394.0], [49.2, 394.0], [49.3, 395.0], [49.4, 396.0], [49.5, 397.0], [49.6, 397.0], [49.7, 397.0], [49.8, 397.0], [49.9, 397.0], [50.0, 398.0], [50.1, 398.0], [50.2, 398.0], [50.3, 400.0], [50.4, 400.0], [50.5, 400.0], [50.6, 400.0], [50.7, 402.0], [50.8, 402.0], [50.9, 403.0], [51.0, 403.0], [51.1, 403.0], [51.2, 405.0], [51.3, 405.0], [51.4, 405.0], [51.5, 405.0], [51.6, 406.0], [51.7, 406.0], [51.8, 406.0], [51.9, 406.0], [52.0, 406.0], [52.1, 407.0], [52.2, 407.0], [52.3, 408.0], [52.4, 408.0], [52.5, 408.0], [52.6, 409.0], [52.7, 409.0], [52.8, 409.0], [52.9, 410.0], [53.0, 412.0], [53.1, 412.0], [53.2, 413.0], [53.3, 413.0], [53.4, 413.0], [53.5, 413.0], [53.6, 414.0], [53.7, 414.0], [53.8, 414.0], [53.9, 415.0], [54.0, 416.0], [54.1, 416.0], [54.2, 417.0], [54.3, 417.0], [54.4, 418.0], [54.5, 418.0], [54.6, 419.0], [54.7, 420.0], [54.8, 420.0], [54.9, 420.0], [55.0, 420.0], [55.1, 421.0], [55.2, 421.0], [55.3, 423.0], [55.4, 423.0], [55.5, 424.0], [55.6, 424.0], [55.7, 425.0], [55.8, 425.0], [55.9, 425.0], [56.0, 425.0], [56.1, 426.0], [56.2, 427.0], [56.3, 428.0], [56.4, 428.0], [56.5, 429.0], [56.6, 430.0], [56.7, 431.0], [56.8, 431.0], [56.9, 431.0], [57.0, 431.0], [57.1, 432.0], [57.2, 433.0], [57.3, 433.0], [57.4, 434.0], [57.5, 435.0], [57.6, 435.0], [57.7, 436.0], [57.8, 437.0], [57.9, 437.0], [58.0, 438.0], [58.1, 440.0], [58.2, 440.0], [58.3, 441.0], [58.4, 442.0], [58.5, 443.0], [58.6, 444.0], [58.7, 444.0], [58.8, 444.0], [58.9, 448.0], [59.0, 450.0], [59.1, 450.0], [59.2, 451.0], [59.3, 452.0], [59.4, 452.0], [59.5, 453.0], [59.6, 455.0], [59.7, 455.0], [59.8, 458.0], [59.9, 459.0], [60.0, 459.0], [60.1, 459.0], [60.2, 462.0], [60.3, 462.0], [60.4, 463.0], [60.5, 464.0], [60.6, 465.0], [60.7, 466.0], [60.8, 466.0], [60.9, 467.0], [61.0, 467.0], [61.1, 473.0], [61.2, 474.0], [61.3, 475.0], [61.4, 475.0], [61.5, 477.0], [61.6, 479.0], [61.7, 479.0], [61.8, 480.0], [61.9, 482.0], [62.0, 485.0], [62.1, 490.0], [62.2, 492.0], [62.3, 495.0], [62.4, 496.0], [62.5, 506.0], [62.6, 507.0], [62.7, 510.0], [62.8, 510.0], [62.9, 516.0], [63.0, 518.0], [63.1, 519.0], [63.2, 521.0], [63.3, 522.0], [63.4, 523.0], [63.5, 525.0], [63.6, 527.0], [63.7, 528.0], [63.8, 529.0], [63.9, 531.0], [64.0, 533.0], [64.1, 534.0], [64.2, 535.0], [64.3, 535.0], [64.4, 538.0], [64.5, 538.0], [64.6, 539.0], [64.7, 539.0], [64.8, 539.0], [64.9, 540.0], [65.0, 541.0], [65.1, 541.0], [65.2, 541.0], [65.3, 541.0], [65.4, 541.0], [65.5, 542.0], [65.6, 542.0], [65.7, 543.0], [65.8, 543.0], [65.9, 543.0], [66.0, 543.0], [66.1, 544.0], [66.2, 544.0], [66.3, 544.0], [66.4, 544.0], [66.5, 544.0], [66.6, 544.0], [66.7, 545.0], [66.8, 545.0], [66.9, 545.0], [67.0, 546.0], [67.1, 546.0], [67.2, 547.0], [67.3, 547.0], [67.4, 547.0], [67.5, 548.0], [67.6, 548.0], [67.7, 548.0], [67.8, 549.0], [67.9, 549.0], [68.0, 549.0], [68.1, 550.0], [68.2, 550.0], [68.3, 550.0], [68.4, 551.0], [68.5, 551.0], [68.6, 551.0], [68.7, 552.0], [68.8, 553.0], [68.9, 553.0], [69.0, 553.0], [69.1, 553.0], [69.2, 554.0], [69.3, 554.0], [69.4, 554.0], [69.5, 555.0], [69.6, 555.0], [69.7, 555.0], [69.8, 556.0], [69.9, 556.0], [70.0, 556.0], [70.1, 556.0], [70.2, 557.0], [70.3, 557.0], [70.4, 558.0], [70.5, 558.0], [70.6, 559.0], [70.7, 559.0], [70.8, 560.0], [70.9, 560.0], [71.0, 561.0], [71.1, 561.0], [71.2, 562.0], [71.3, 562.0], [71.4, 562.0], [71.5, 562.0], [71.6, 563.0], [71.7, 564.0], [71.8, 564.0], [71.9, 564.0], [72.0, 565.0], [72.1, 566.0], [72.2, 567.0], [72.3, 568.0], [72.4, 570.0], [72.5, 571.0], [72.6, 571.0], [72.7, 573.0], [72.8, 580.0], [72.9, 587.0], [73.0, 588.0], [73.1, 590.0], [73.2, 591.0], [73.3, 592.0], [73.4, 594.0], [73.5, 594.0], [73.6, 598.0], [73.7, 599.0], [73.8, 604.0], [73.9, 608.0], [74.0, 609.0], [74.1, 612.0], [74.2, 612.0], [74.3, 618.0], [74.4, 621.0], [74.5, 622.0], [74.6, 622.0], [74.7, 626.0], [74.8, 629.0], [74.9, 629.0], [75.0, 629.0], [75.1, 630.0], [75.2, 633.0], [75.3, 635.0], [75.4, 636.0], [75.5, 640.0], [75.6, 640.0], [75.7, 641.0], [75.8, 643.0], [75.9, 644.0], [76.0, 645.0], [76.1, 646.0], [76.2, 647.0], [76.3, 650.0], [76.4, 652.0], [76.5, 661.0], [76.6, 663.0], [76.7, 663.0], [76.8, 665.0], [76.9, 666.0], [77.0, 669.0], [77.1, 671.0], [77.2, 671.0], [77.3, 672.0], [77.4, 674.0], [77.5, 677.0], [77.6, 677.0], [77.7, 678.0], [77.8, 679.0], [77.9, 686.0], [78.0, 688.0], [78.1, 689.0], [78.2, 691.0], [78.3, 694.0], [78.4, 697.0], [78.5, 698.0], [78.6, 699.0], [78.7, 700.0], [78.8, 705.0], [78.9, 707.0], [79.0, 708.0], [79.1, 710.0], [79.2, 712.0], [79.3, 714.0], [79.4, 716.0], [79.5, 719.0], [79.6, 719.0], [79.7, 728.0], [79.8, 735.0], [79.9, 735.0], [80.0, 739.0], [80.1, 751.0], [80.2, 753.0], [80.3, 753.0], [80.4, 755.0], [80.5, 769.0], [80.6, 771.0], [80.7, 771.0], [80.8, 776.0], [80.9, 780.0], [81.0, 789.0], [81.1, 797.0], [81.2, 797.0], [81.3, 804.0], [81.4, 805.0], [81.5, 806.0], [81.6, 816.0], [81.7, 821.0], [81.8, 824.0], [81.9, 826.0], [82.0, 828.0], [82.1, 831.0], [82.2, 835.0], [82.3, 841.0], [82.4, 845.0], [82.5, 848.0], [82.6, 849.0], [82.7, 849.0], [82.8, 852.0], [82.9, 859.0], [83.0, 860.0], [83.1, 862.0], [83.2, 863.0], [83.3, 871.0], [83.4, 872.0], [83.5, 876.0], [83.6, 876.0], [83.7, 889.0], [83.8, 899.0], [83.9, 913.0], [84.0, 913.0], [84.1, 917.0], [84.2, 922.0], [84.3, 923.0], [84.4, 923.0], [84.5, 924.0], [84.6, 926.0], [84.7, 932.0], [84.8, 933.0], [84.9, 933.0], [85.0, 949.0], [85.1, 952.0], [85.2, 954.0], [85.3, 954.0], [85.4, 961.0], [85.5, 963.0], [85.6, 969.0], [85.7, 971.0], [85.8, 973.0], [85.9, 975.0], [86.0, 985.0], [86.1, 986.0], [86.2, 987.0], [86.3, 991.0], [86.4, 998.0], [86.5, 1012.0], [86.6, 1012.0], [86.7, 1021.0], [86.8, 1022.0], [86.9, 1042.0], [87.0, 1048.0], [87.1, 1050.0], [87.2, 1052.0], [87.3, 1056.0], [87.4, 1062.0], [87.5, 1071.0], [87.6, 1072.0], [87.7, 1073.0], [87.8, 1093.0], [87.9, 1096.0], [88.0, 1105.0], [88.1, 1118.0], [88.2, 1121.0], [88.3, 1132.0], [88.4, 1134.0], [88.5, 1135.0], [88.6, 1138.0], [88.7, 1149.0], [88.8, 1152.0], [88.9, 1159.0], [89.0, 1162.0], [89.1, 1165.0], [89.2, 1181.0], [89.3, 1181.0], [89.4, 1186.0], [89.5, 1195.0], [89.6, 1206.0], [89.7, 1211.0], [89.8, 1225.0], [89.9, 1236.0], [90.0, 1241.0], [90.1, 1242.0], [90.2, 1242.0], [90.3, 1244.0], [90.4, 1246.0], [90.5, 1256.0], [90.6, 1264.0], [90.7, 1265.0], [90.8, 1272.0], [90.9, 1301.0], [91.0, 1333.0], [91.1, 1337.0], [91.2, 1344.0], [91.3, 1355.0], [91.4, 1368.0], [91.5, 1375.0], [91.6, 1376.0], [91.7, 1378.0], [91.8, 1379.0], [91.9, 1389.0], [92.0, 1396.0], [92.1, 1401.0], [92.2, 1402.0], [92.3, 1403.0], [92.4, 1404.0], [92.5, 1406.0], [92.6, 1406.0], [92.7, 1407.0], [92.8, 1409.0], [92.9, 1411.0], [93.0, 1412.0], [93.1, 1412.0], [93.2, 1413.0], [93.3, 1414.0], [93.4, 1416.0], [93.5, 1421.0], [93.6, 1427.0], [93.7, 1428.0], [93.8, 1431.0], [93.9, 1431.0], [94.0, 1439.0], [94.1, 1440.0], [94.2, 1441.0], [94.3, 1447.0], [94.4, 1460.0], [94.5, 1464.0], [94.6, 1465.0], [94.7, 1467.0], [94.8, 1468.0], [94.9, 1471.0], [95.0, 1474.0], [95.1, 1481.0], [95.2, 1493.0], [95.3, 1495.0], [95.4, 1496.0], [95.5, 1501.0], [95.6, 1506.0], [95.7, 1513.0], [95.8, 1515.0], [95.9, 1516.0], [96.0, 1524.0], [96.1, 1530.0], [96.2, 1543.0], [96.3, 1547.0], [96.4, 1552.0], [96.5, 1567.0], [96.6, 1585.0], [96.7, 1599.0], [96.8, 1619.0], [96.9, 1644.0], [97.0, 1658.0], [97.1, 1683.0], [97.2, 1725.0], [97.3, 1768.0], [97.4, 1835.0], [97.5, 1841.0], [97.6, 2043.0], [97.7, 2154.0], [97.8, 2173.0], [97.9, 2180.0], [98.0, 2335.0], [98.1, 2428.0], [98.2, 2516.0], [98.3, 2533.0], [98.4, 2542.0], [98.5, 2543.0], [98.6, 2544.0], [98.7, 2550.0], [98.8, 2552.0], [98.9, 2559.0], [99.0, 2573.0], [99.1, 2589.0], [99.2, 2628.0], [99.3, 2759.0], [99.4, 3656.0], [99.5, 3982.0], [99.6, 4145.0], [99.7, 4249.0], [99.8, 4404.0], [99.9, 5406.0], [100.0, 5430.0]], "isOverall": false, "label": "Post Request", "isController": false}, {"data": [[0.0, 67.0], [0.1, 98.0], [0.2, 99.0], [0.3, 101.0], [0.4, 104.0], [0.5, 113.0], [0.6, 115.0], [0.7, 115.0], [0.8, 116.0], [0.9, 116.0], [1.0, 116.0], [1.1, 116.0], [1.2, 119.0], [1.3, 120.0], [1.4, 124.0], [1.5, 127.0], [1.6, 127.0], [1.7, 130.0], [1.8, 131.0], [1.9, 139.0], [2.0, 140.0], [2.1, 141.0], [2.2, 143.0], [2.3, 147.0], [2.4, 150.0], [2.5, 168.0], [2.6, 168.0], [2.7, 170.0], [2.8, 178.0], [2.9, 181.0], [3.0, 185.0], [3.1, 194.0], [3.2, 203.0], [3.3, 203.0], [3.4, 207.0], [3.5, 208.0], [3.6, 213.0], [3.7, 217.0], [3.8, 223.0], [3.9, 224.0], [4.0, 225.0], [4.1, 233.0], [4.2, 233.0], [4.3, 237.0], [4.4, 238.0], [4.5, 238.0], [4.6, 241.0], [4.7, 244.0], [4.8, 244.0], [4.9, 245.0], [5.0, 246.0], [5.1, 246.0], [5.2, 248.0], [5.3, 248.0], [5.4, 249.0], [5.5, 257.0], [5.6, 258.0], [5.7, 258.0], [5.8, 262.0], [5.9, 267.0], [6.0, 268.0], [6.1, 269.0], [6.2, 269.0], [6.3, 273.0], [6.4, 275.0], [6.5, 286.0], [6.6, 288.0], [6.7, 288.0], [6.8, 289.0], [6.9, 289.0], [7.0, 292.0], [7.1, 297.0], [7.2, 300.0], [7.3, 303.0], [7.4, 307.0], [7.5, 309.0], [7.6, 311.0], [7.7, 316.0], [7.8, 316.0], [7.9, 316.0], [8.0, 317.0], [8.1, 320.0], [8.2, 325.0], [8.3, 327.0], [8.4, 327.0], [8.5, 327.0], [8.6, 329.0], [8.7, 329.0], [8.8, 337.0], [8.9, 343.0], [9.0, 345.0], [9.1, 352.0], [9.2, 354.0], [9.3, 360.0], [9.4, 361.0], [9.5, 361.0], [9.6, 366.0], [9.7, 369.0], [9.8, 370.0], [9.9, 373.0], [10.0, 378.0], [10.1, 379.0], [10.2, 381.0], [10.3, 382.0], [10.4, 382.0], [10.5, 422.0], [10.6, 427.0], [10.7, 430.0], [10.8, 438.0], [10.9, 446.0], [11.0, 467.0], [11.1, 468.0], [11.2, 471.0], [11.3, 472.0], [11.4, 474.0], [11.5, 487.0], [11.6, 488.0], [11.7, 488.0], [11.8, 498.0], [11.9, 500.0], [12.0, 501.0], [12.1, 503.0], [12.2, 503.0], [12.3, 517.0], [12.4, 518.0], [12.5, 519.0], [12.6, 522.0], [12.7, 527.0], [12.8, 529.0], [12.9, 530.0], [13.0, 531.0], [13.1, 532.0], [13.2, 535.0], [13.3, 538.0], [13.4, 543.0], [13.5, 545.0], [13.6, 549.0], [13.7, 550.0], [13.8, 556.0], [13.9, 560.0], [14.0, 562.0], [14.1, 564.0], [14.2, 572.0], [14.3, 574.0], [14.4, 581.0], [14.5, 582.0], [14.6, 585.0], [14.7, 592.0], [14.8, 596.0], [14.9, 603.0], [15.0, 621.0], [15.1, 627.0], [15.2, 642.0], [15.3, 646.0], [15.4, 662.0], [15.5, 663.0], [15.6, 665.0], [15.7, 672.0], [15.8, 673.0], [15.9, 686.0], [16.0, 686.0], [16.1, 689.0], [16.2, 694.0], [16.3, 710.0], [16.4, 716.0], [16.5, 725.0], [16.6, 728.0], [16.7, 730.0], [16.8, 738.0], [16.9, 746.0], [17.0, 750.0], [17.1, 751.0], [17.2, 758.0], [17.3, 759.0], [17.4, 759.0], [17.5, 765.0], [17.6, 766.0], [17.7, 780.0], [17.8, 782.0], [17.9, 784.0], [18.0, 785.0], [18.1, 789.0], [18.2, 791.0], [18.3, 795.0], [18.4, 795.0], [18.5, 797.0], [18.6, 804.0], [18.7, 806.0], [18.8, 809.0], [18.9, 811.0], [19.0, 813.0], [19.1, 821.0], [19.2, 821.0], [19.3, 822.0], [19.4, 830.0], [19.5, 838.0], [19.6, 840.0], [19.7, 842.0], [19.8, 842.0], [19.9, 850.0], [20.0, 865.0], [20.1, 867.0], [20.2, 868.0], [20.3, 868.0], [20.4, 870.0], [20.5, 870.0], [20.6, 871.0], [20.7, 871.0], [20.8, 874.0], [20.9, 883.0], [21.0, 885.0], [21.1, 905.0], [21.2, 909.0], [21.3, 938.0], [21.4, 942.0], [21.5, 942.0], [21.6, 945.0], [21.7, 947.0], [21.8, 953.0], [21.9, 954.0], [22.0, 954.0], [22.1, 955.0], [22.2, 961.0], [22.3, 962.0], [22.4, 966.0], [22.5, 968.0], [22.6, 973.0], [22.7, 975.0], [22.8, 983.0], [22.9, 985.0], [23.0, 985.0], [23.1, 988.0], [23.2, 990.0], [23.3, 993.0], [23.4, 1005.0], [23.5, 1005.0], [23.6, 1023.0], [23.7, 1035.0], [23.8, 1039.0], [23.9, 1039.0], [24.0, 1046.0], [24.1, 1060.0], [24.2, 1063.0], [24.3, 1067.0], [24.4, 1067.0], [24.5, 1073.0], [24.6, 1077.0], [24.7, 1083.0], [24.8, 1086.0], [24.9, 1106.0], [25.0, 1113.0], [25.1, 1119.0], [25.2, 1126.0], [25.3, 1134.0], [25.4, 1141.0], [25.5, 1142.0], [25.6, 1144.0], [25.7, 1158.0], [25.8, 1167.0], [25.9, 1169.0], [26.0, 1169.0], [26.1, 1170.0], [26.2, 1176.0], [26.3, 1199.0], [26.4, 1200.0], [26.5, 1201.0], [26.6, 1203.0], [26.7, 1205.0], [26.8, 1205.0], [26.9, 1210.0], [27.0, 1211.0], [27.1, 1213.0], [27.2, 1219.0], [27.3, 1230.0], [27.4, 1230.0], [27.5, 1232.0], [27.6, 1233.0], [27.7, 1236.0], [27.8, 1237.0], [27.9, 1239.0], [28.0, 1246.0], [28.1, 1246.0], [28.2, 1249.0], [28.3, 1250.0], [28.4, 1254.0], [28.5, 1254.0], [28.6, 1261.0], [28.7, 1264.0], [28.8, 1267.0], [28.9, 1270.0], [29.0, 1279.0], [29.1, 1282.0], [29.2, 1283.0], [29.3, 1289.0], [29.4, 1289.0], [29.5, 1293.0], [29.6, 1296.0], [29.7, 1298.0], [29.8, 1299.0], [29.9, 1304.0], [30.0, 1305.0], [30.1, 1317.0], [30.2, 1320.0], [30.3, 1324.0], [30.4, 1333.0], [30.5, 1342.0], [30.6, 1343.0], [30.7, 1367.0], [30.8, 1370.0], [30.9, 1374.0], [31.0, 1378.0], [31.1, 1379.0], [31.2, 1380.0], [31.3, 1399.0], [31.4, 1404.0], [31.5, 1405.0], [31.6, 1407.0], [31.7, 1412.0], [31.8, 1417.0], [31.9, 1419.0], [32.0, 1428.0], [32.1, 1428.0], [32.2, 1491.0], [32.3, 1495.0], [32.4, 1496.0], [32.5, 1501.0], [32.6, 1511.0], [32.7, 1540.0], [32.8, 1545.0], [32.9, 1550.0], [33.0, 1553.0], [33.1, 1566.0], [33.2, 1567.0], [33.3, 1579.0], [33.4, 1582.0], [33.5, 1587.0], [33.6, 1601.0], [33.7, 1603.0], [33.8, 1604.0], [33.9, 1608.0], [34.0, 1620.0], [34.1, 1622.0], [34.2, 1626.0], [34.3, 1628.0], [34.4, 1632.0], [34.5, 1639.0], [34.6, 1643.0], [34.7, 1645.0], [34.8, 1645.0], [34.9, 1655.0], [35.0, 1656.0], [35.1, 1657.0], [35.2, 1666.0], [35.3, 1668.0], [35.4, 1670.0], [35.5, 1670.0], [35.6, 1679.0], [35.7, 1686.0], [35.8, 1690.0], [35.9, 1691.0], [36.0, 1694.0], [36.1, 1695.0], [36.2, 1695.0], [36.3, 1717.0], [36.4, 1727.0], [36.5, 1729.0], [36.6, 1739.0], [36.7, 1743.0], [36.8, 1743.0], [36.9, 1744.0], [37.0, 1758.0], [37.1, 1761.0], [37.2, 1762.0], [37.3, 1762.0], [37.4, 1762.0], [37.5, 1774.0], [37.6, 1779.0], [37.7, 1781.0], [37.8, 1782.0], [37.9, 1785.0], [38.0, 1786.0], [38.1, 1791.0], [38.2, 1798.0], [38.3, 1798.0], [38.4, 1802.0], [38.5, 1803.0], [38.6, 1804.0], [38.7, 1806.0], [38.8, 1807.0], [38.9, 1810.0], [39.0, 1817.0], [39.1, 1820.0], [39.2, 1822.0], [39.3, 1824.0], [39.4, 1830.0], [39.5, 1831.0], [39.6, 1840.0], [39.7, 1852.0], [39.8, 1853.0], [39.9, 1882.0], [40.0, 1900.0], [40.1, 1910.0], [40.2, 1918.0], [40.3, 1926.0], [40.4, 1929.0], [40.5, 1930.0], [40.6, 1931.0], [40.7, 1932.0], [40.8, 1934.0], [40.9, 1935.0], [41.0, 1937.0], [41.1, 1940.0], [41.2, 1943.0], [41.3, 1946.0], [41.4, 1947.0], [41.5, 1948.0], [41.6, 1949.0], [41.7, 1952.0], [41.8, 1968.0], [41.9, 1975.0], [42.0, 1994.0], [42.1, 2025.0], [42.2, 2035.0], [42.3, 2035.0], [42.4, 2038.0], [42.5, 2044.0], [42.6, 2049.0], [42.7, 2050.0], [42.8, 2051.0], [42.9, 2052.0], [43.0, 2054.0], [43.1, 2063.0], [43.2, 2064.0], [43.3, 2067.0], [43.4, 2068.0], [43.5, 2070.0], [43.6, 2077.0], [43.7, 2087.0], [43.8, 2089.0], [43.9, 2097.0], [44.0, 2097.0], [44.1, 2099.0], [44.2, 2100.0], [44.3, 2102.0], [44.4, 2104.0], [44.5, 2109.0], [44.6, 2113.0], [44.7, 2113.0], [44.8, 2114.0], [44.9, 2115.0], [45.0, 2116.0], [45.1, 2117.0], [45.2, 2117.0], [45.3, 2120.0], [45.4, 2121.0], [45.5, 2122.0], [45.6, 2124.0], [45.7, 2125.0], [45.8, 2127.0], [45.9, 2128.0], [46.0, 2128.0], [46.1, 2128.0], [46.2, 2130.0], [46.3, 2131.0], [46.4, 2133.0], [46.5, 2133.0], [46.6, 2135.0], [46.7, 2137.0], [46.8, 2140.0], [46.9, 2141.0], [47.0, 2142.0], [47.1, 2148.0], [47.2, 2149.0], [47.3, 2152.0], [47.4, 2154.0], [47.5, 2155.0], [47.6, 2157.0], [47.7, 2159.0], [47.8, 2161.0], [47.9, 2163.0], [48.0, 2167.0], [48.1, 2170.0], [48.2, 2171.0], [48.3, 2171.0], [48.4, 2172.0], [48.5, 2174.0], [48.6, 2177.0], [48.7, 2178.0], [48.8, 2178.0], [48.9, 2179.0], [49.0, 2184.0], [49.1, 2185.0], [49.2, 2186.0], [49.3, 2186.0], [49.4, 2192.0], [49.5, 2193.0], [49.6, 2193.0], [49.7, 2193.0], [49.8, 2195.0], [49.9, 2199.0], [50.0, 2200.0], [50.1, 2200.0], [50.2, 2201.0], [50.3, 2204.0], [50.4, 2205.0], [50.5, 2206.0], [50.6, 2213.0], [50.7, 2216.0], [50.8, 2224.0], [50.9, 2229.0], [51.0, 2233.0], [51.1, 2234.0], [51.2, 2235.0], [51.3, 2237.0], [51.4, 2238.0], [51.5, 2239.0], [51.6, 2244.0], [51.7, 2244.0], [51.8, 2245.0], [51.9, 2245.0], [52.0, 2246.0], [52.1, 2254.0], [52.2, 2264.0], [52.3, 2265.0], [52.4, 2265.0], [52.5, 2271.0], [52.6, 2293.0], [52.7, 2372.0], [52.8, 2381.0], [52.9, 2382.0], [53.0, 2405.0], [53.1, 2417.0], [53.2, 2417.0], [53.3, 2417.0], [53.4, 2421.0], [53.5, 2428.0], [53.6, 2430.0], [53.7, 2430.0], [53.8, 2433.0], [53.9, 2450.0], [54.0, 2454.0], [54.1, 2455.0], [54.2, 2456.0], [54.3, 2461.0], [54.4, 2468.0], [54.5, 2468.0], [54.6, 2471.0], [54.7, 2472.0], [54.8, 2480.0], [54.9, 2480.0], [55.0, 2481.0], [55.1, 2484.0], [55.2, 2484.0], [55.3, 2487.0], [55.4, 2488.0], [55.5, 2492.0], [55.6, 2494.0], [55.7, 2496.0], [55.8, 2497.0], [55.9, 2497.0], [56.0, 2500.0], [56.1, 2501.0], [56.2, 2505.0], [56.3, 2505.0], [56.4, 2507.0], [56.5, 2516.0], [56.6, 2522.0], [56.7, 2525.0], [56.8, 2528.0], [56.9, 2532.0], [57.0, 2532.0], [57.1, 2534.0], [57.2, 2537.0], [57.3, 2537.0], [57.4, 2538.0], [57.5, 2544.0], [57.6, 2546.0], [57.7, 2548.0], [57.8, 2550.0], [57.9, 2550.0], [58.0, 2558.0], [58.1, 2560.0], [58.2, 2561.0], [58.3, 2564.0], [58.4, 2572.0], [58.5, 2573.0], [58.6, 2578.0], [58.7, 2581.0], [58.8, 2592.0], [58.9, 2605.0], [59.0, 2693.0], [59.1, 2721.0], [59.2, 2768.0], [59.3, 2791.0], [59.4, 2827.0], [59.5, 2840.0], [59.6, 2849.0], [59.7, 2852.0], [59.8, 2889.0], [59.9, 2914.0], [60.0, 2929.0], [60.1, 2953.0], [60.2, 2956.0], [60.3, 2956.0], [60.4, 2958.0], [60.5, 2963.0], [60.6, 2963.0], [60.7, 2968.0], [60.8, 2968.0], [60.9, 2969.0], [61.0, 2973.0], [61.1, 2980.0], [61.2, 2982.0], [61.3, 2982.0], [61.4, 2983.0], [61.5, 2984.0], [61.6, 2985.0], [61.7, 2985.0], [61.8, 2985.0], [61.9, 2992.0], [62.0, 2995.0], [62.1, 2997.0], [62.2, 2998.0], [62.3, 3002.0], [62.4, 3005.0], [62.5, 3021.0], [62.6, 3042.0], [62.7, 3051.0], [62.8, 3063.0], [62.9, 3074.0], [63.0, 3074.0], [63.1, 3075.0], [63.2, 3085.0], [63.3, 3090.0], [63.4, 3096.0], [63.5, 3100.0], [63.6, 3102.0], [63.7, 3107.0], [63.8, 3108.0], [63.9, 3118.0], [64.0, 3122.0], [64.1, 3123.0], [64.2, 3124.0], [64.3, 3132.0], [64.4, 3137.0], [64.5, 3142.0], [64.6, 3143.0], [64.7, 3147.0], [64.8, 3151.0], [64.9, 3156.0], [65.0, 3156.0], [65.1, 3156.0], [65.2, 3158.0], [65.3, 3161.0], [65.4, 3163.0], [65.5, 3163.0], [65.6, 3170.0], [65.7, 3171.0], [65.8, 3175.0], [65.9, 3175.0], [66.0, 3177.0], [66.1, 3178.0], [66.2, 3180.0], [66.3, 3183.0], [66.4, 3185.0], [66.5, 3185.0], [66.6, 3189.0], [66.7, 3192.0], [66.8, 3193.0], [66.9, 3193.0], [67.0, 3197.0], [67.1, 3198.0], [67.2, 3199.0], [67.3, 3204.0], [67.4, 3204.0], [67.5, 3205.0], [67.6, 3208.0], [67.7, 3216.0], [67.8, 3217.0], [67.9, 3218.0], [68.0, 3218.0], [68.1, 3230.0], [68.2, 3231.0], [68.3, 3232.0], [68.4, 3234.0], [68.5, 3235.0], [68.6, 3235.0], [68.7, 3235.0], [68.8, 3240.0], [68.9, 3247.0], [69.0, 3248.0], [69.1, 3250.0], [69.2, 3252.0], [69.3, 3256.0], [69.4, 3256.0], [69.5, 3260.0], [69.6, 3262.0], [69.7, 3267.0], [69.8, 3270.0], [69.9, 3271.0], [70.0, 3278.0], [70.1, 3286.0], [70.2, 3288.0], [70.3, 3295.0], [70.4, 3306.0], [70.5, 3312.0], [70.6, 3313.0], [70.7, 3316.0], [70.8, 3317.0], [70.9, 3321.0], [71.0, 3322.0], [71.1, 3324.0], [71.2, 3325.0], [71.3, 3325.0], [71.4, 3335.0], [71.5, 3338.0], [71.6, 3339.0], [71.7, 3340.0], [71.8, 3342.0], [71.9, 3342.0], [72.0, 3343.0], [72.1, 3343.0], [72.2, 3348.0], [72.3, 3350.0], [72.4, 3353.0], [72.5, 3355.0], [72.6, 3355.0], [72.7, 3358.0], [72.8, 3358.0], [72.9, 3364.0], [73.0, 3365.0], [73.1, 3366.0], [73.2, 3368.0], [73.3, 3368.0], [73.4, 3369.0], [73.5, 3370.0], [73.6, 3371.0], [73.7, 3371.0], [73.8, 3371.0], [73.9, 3372.0], [74.0, 3372.0], [74.1, 3375.0], [74.2, 3375.0], [74.3, 3375.0], [74.4, 3376.0], [74.5, 3377.0], [74.6, 3378.0], [74.7, 3380.0], [74.8, 3380.0], [74.9, 3382.0], [75.0, 3383.0], [75.1, 3385.0], [75.2, 3387.0], [75.3, 3387.0], [75.4, 3390.0], [75.5, 3391.0], [75.6, 3393.0], [75.7, 3394.0], [75.8, 3396.0], [75.9, 3398.0], [76.0, 3400.0], [76.1, 3403.0], [76.2, 3405.0], [76.3, 3413.0], [76.4, 3418.0], [76.5, 3423.0], [76.6, 3425.0], [76.7, 3428.0], [76.8, 3432.0], [76.9, 3439.0], [77.0, 3456.0], [77.1, 3457.0], [77.2, 3490.0], [77.3, 3498.0], [77.4, 3506.0], [77.5, 3506.0], [77.6, 3508.0], [77.7, 3511.0], [77.8, 3513.0], [77.9, 3530.0], [78.0, 3532.0], [78.1, 3533.0], [78.2, 3534.0], [78.3, 3536.0], [78.4, 3539.0], [78.5, 3542.0], [78.6, 3545.0], [78.7, 3553.0], [78.8, 3565.0], [78.9, 3566.0], [79.0, 3574.0], [79.1, 3577.0], [79.2, 3581.0], [79.3, 3582.0], [79.4, 3586.0], [79.5, 3586.0], [79.6, 3587.0], [79.7, 3593.0], [79.8, 3694.0], [79.9, 3721.0], [80.0, 3765.0], [80.1, 3773.0], [80.2, 3780.0], [80.3, 3784.0], [80.4, 3790.0], [80.5, 3801.0], [80.6, 3819.0], [80.7, 3829.0], [80.8, 3830.0], [80.9, 3835.0], [81.0, 3839.0], [81.1, 3850.0], [81.2, 3881.0], [81.3, 3889.0], [81.4, 3889.0], [81.5, 3922.0], [81.6, 3923.0], [81.7, 3924.0], [81.8, 3931.0], [81.9, 3945.0], [82.0, 3949.0], [82.1, 3953.0], [82.2, 3953.0], [82.3, 3957.0], [82.4, 3980.0], [82.5, 3980.0], [82.6, 3981.0], [82.7, 3985.0], [82.8, 4026.0], [82.9, 4064.0], [83.0, 4081.0], [83.1, 4090.0], [83.2, 4094.0], [83.3, 4113.0], [83.4, 4138.0], [83.5, 4151.0], [83.6, 4172.0], [83.7, 4174.0], [83.8, 4182.0], [83.9, 4196.0], [84.0, 4208.0], [84.1, 4216.0], [84.2, 4218.0], [84.3, 4219.0], [84.4, 4230.0], [84.5, 4236.0], [84.6, 4240.0], [84.7, 4245.0], [84.8, 4258.0], [84.9, 4269.0], [85.0, 4271.0], [85.1, 4279.0], [85.2, 4281.0], [85.3, 4281.0], [85.4, 4288.0], [85.5, 4289.0], [85.6, 4292.0], [85.7, 4292.0], [85.8, 4292.0], [85.9, 4294.0], [86.0, 4295.0], [86.1, 4295.0], [86.2, 4300.0], [86.3, 4300.0], [86.4, 4301.0], [86.5, 4304.0], [86.6, 4305.0], [86.7, 4305.0], [86.8, 4307.0], [86.9, 4316.0], [87.0, 4327.0], [87.1, 4330.0], [87.2, 4340.0], [87.3, 4340.0], [87.4, 4348.0], [87.5, 4350.0], [87.6, 4350.0], [87.7, 4364.0], [87.8, 4369.0], [87.9, 4371.0], [88.0, 4382.0], [88.1, 4391.0], [88.2, 4391.0], [88.3, 4402.0], [88.4, 4428.0], [88.5, 4432.0], [88.6, 4437.0], [88.7, 4462.0], [88.8, 4472.0], [88.9, 4473.0], [89.0, 4473.0], [89.1, 4487.0], [89.2, 4488.0], [89.3, 4490.0], [89.4, 4511.0], [89.5, 4568.0], [89.6, 4596.0], [89.7, 4610.0], [89.8, 4615.0], [89.9, 4618.0], [90.0, 4620.0], [90.1, 4654.0], [90.2, 4659.0], [90.3, 4669.0], [90.4, 4671.0], [90.5, 4679.0], [90.6, 4680.0], [90.7, 4712.0], [90.8, 4713.0], [90.9, 4717.0], [91.0, 4738.0], [91.1, 4755.0], [91.2, 4757.0], [91.3, 4760.0], [91.4, 4763.0], [91.5, 4767.0], [91.6, 4769.0], [91.7, 4770.0], [91.8, 4784.0], [91.9, 4827.0], [92.0, 4849.0], [92.1, 4860.0], [92.2, 4864.0], [92.3, 4883.0], [92.4, 4918.0], [92.5, 4926.0], [92.6, 4933.0], [92.7, 4973.0], [92.8, 4982.0], [92.9, 4993.0], [93.0, 5000.0], [93.1, 5023.0], [93.2, 5028.0], [93.3, 5042.0], [93.4, 5048.0], [93.5, 5048.0], [93.6, 5060.0], [93.7, 5065.0], [93.8, 5068.0], [93.9, 5071.0], [94.0, 5071.0], [94.1, 5073.0], [94.2, 5082.0], [94.3, 5085.0], [94.4, 5087.0], [94.5, 5088.0], [94.6, 5097.0], [94.7, 5109.0], [94.8, 5110.0], [94.9, 5111.0], [95.0, 5114.0], [95.1, 5163.0], [95.2, 5166.0], [95.3, 5172.0], [95.4, 5202.0], [95.5, 5230.0], [95.6, 5257.0], [95.7, 5316.0], [95.8, 5317.0], [95.9, 5335.0], [96.0, 5359.0], [96.1, 5386.0], [96.2, 5391.0], [96.3, 5392.0], [96.4, 5397.0], [96.5, 5398.0], [96.6, 5399.0], [96.7, 5400.0], [96.8, 5407.0], [96.9, 5410.0], [97.0, 5410.0], [97.1, 5412.0], [97.2, 5427.0], [97.3, 5435.0], [97.4, 5439.0], [97.5, 5440.0], [97.6, 5441.0], [97.7, 5445.0], [97.8, 5449.0], [97.9, 5451.0], [98.0, 5454.0], [98.1, 5470.0], [98.2, 5473.0], [98.3, 5476.0], [98.4, 5487.0], [98.5, 5517.0], [98.6, 5520.0], [98.7, 5710.0], [98.8, 5718.0], [98.9, 5784.0], [99.0, 5901.0], [99.1, 6160.0], [99.2, 6188.0], [99.3, 6190.0], [99.4, 6192.0], [99.5, 6201.0], [99.6, 6208.0], [99.7, 6373.0], [99.8, 6412.0], [99.9, 6466.0], [100.0, 6926.0]], "isOverall": false, "label": "get Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 610.0, "series": [{"data": [[600.0, 60.0], [700.0, 32.0], [800.0, 32.0], [900.0, 31.0], [1000.0, 19.0], [1100.0, 20.0], [1200.0, 15.0], [1300.0, 15.0], [1400.0, 41.0], [1500.0, 16.0], [1600.0, 5.0], [1700.0, 3.0], [1800.0, 2.0], [2000.0, 1.0], [2100.0, 4.0], [2300.0, 1.0], [2400.0, 1.0], [2500.0, 13.0], [2600.0, 1.0], [2700.0, 1.0], [200.0, 4.0], [3600.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 1.0], [4400.0, 1.0], [300.0, 610.0], [5400.0, 2.0], [400.0, 148.0], [500.0, 138.0]], "isOverall": false, "label": "Post Request", "isController": false}, {"data": [[0.0, 3.0], [600.0, 18.0], [700.0, 27.0], [800.0, 31.0], [900.0, 28.0], [1000.0, 19.0], [1100.0, 18.0], [1200.0, 42.0], [1300.0, 19.0], [1400.0, 13.0], [1500.0, 14.0], [1600.0, 33.0], [1700.0, 25.0], [1800.0, 20.0], [1900.0, 25.0], [2000.0, 26.0], [2100.0, 71.0], [2200.0, 33.0], [2300.0, 3.0], [2400.0, 37.0], [2500.0, 35.0], [2600.0, 3.0], [2800.0, 6.0], [2700.0, 4.0], [2900.0, 29.0], [3000.0, 15.0], [3100.0, 46.0], [3200.0, 38.0], [3300.0, 68.0], [3400.0, 17.0], [3500.0, 30.0], [3700.0, 7.0], [3600.0, 1.0], [3800.0, 12.0], [3900.0, 16.0], [4000.0, 6.0], [4300.0, 26.0], [4100.0, 9.0], [4200.0, 27.0], [4400.0, 13.0], [4500.0, 4.0], [4600.0, 12.0], [4800.0, 5.0], [4700.0, 15.0], [5000.0, 21.0], [5100.0, 8.0], [4900.0, 8.0], [5300.0, 12.0], [5200.0, 4.0], [5500.0, 3.0], [5400.0, 22.0], [5700.0, 3.0], [5900.0, 2.0], [6100.0, 4.0], [6200.0, 3.0], [6300.0, 1.0], [6400.0, 2.0], [6900.0, 1.0], [100.0, 36.0], [200.0, 48.0], [300.0, 40.0], [400.0, 18.0], [500.0, 36.0]], "isOverall": false, "label": "get Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 906.0, "series": [{"data": [[0.0, 906.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 653.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 880.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.26904176904196, "minX": 1.66782132E12, "maxY": 500.26904176904196, "series": [{"data": [[1.66782132E12, 500.26904176904196]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66782132E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 117.0, "minX": 1.0, "maxY": 6466.0, "series": [{"data": [[2.0, 369.0], [3.0, 329.0], [4.0, 349.0], [5.0, 377.0], [7.0, 336.5], [8.0, 328.0], [9.0, 317.0], [10.0, 331.0], [11.0, 332.0], [12.0, 329.0], [13.0, 319.0], [14.0, 364.0], [15.0, 299.0], [16.0, 347.0], [17.0, 353.0], [18.0, 319.0], [19.0, 341.0], [20.0, 341.0], [21.0, 347.0], [22.0, 346.0], [23.0, 328.0], [24.0, 316.0], [26.0, 333.0], [27.0, 338.0], [28.0, 321.0], [29.0, 315.0], [30.0, 317.0], [31.0, 323.0], [33.0, 327.0], [32.0, 325.0], [35.0, 344.0], [34.0, 307.0], [37.0, 335.0], [36.0, 316.0], [39.0, 309.0], [38.0, 331.0], [41.0, 330.0], [40.0, 305.0], [43.0, 322.0], [42.0, 322.0], [45.0, 343.0], [44.0, 310.0], [47.0, 315.0], [46.0, 324.0], [49.0, 304.0], [48.0, 297.0], [51.0, 351.5], [52.0, 341.0], [55.0, 308.0], [54.0, 340.0], [57.0, 338.0], [56.0, 339.0], [59.0, 328.0], [58.0, 345.0], [61.0, 345.0], [60.0, 326.0], [62.0, 315.0], [67.0, 308.0], [66.0, 337.0], [65.0, 313.0], [64.0, 336.0], [71.0, 338.0], [70.0, 328.6666666666667], [75.0, 311.0], [74.0, 327.0], [72.0, 317.0], [79.0, 336.0], [78.0, 338.6666666666667], [83.0, 334.5], [81.0, 322.0], [80.0, 360.0], [87.0, 325.0], [86.0, 333.5], [84.0, 316.0], [91.0, 332.0], [90.0, 340.0], [89.0, 344.5], [95.0, 312.0], [94.0, 323.0], [93.0, 325.0], [92.0, 312.0], [99.0, 310.0], [98.0, 345.0], [97.0, 330.0], [96.0, 316.0], [103.0, 305.0], [102.0, 337.0], [101.0, 344.0], [100.0, 320.0], [107.0, 334.0], [106.0, 343.0], [105.0, 5406.0], [104.0, 5430.0], [111.0, 310.0], [110.0, 310.0], [109.0, 325.0], [108.0, 325.0], [115.0, 323.0], [114.0, 334.0], [113.0, 335.0], [112.0, 312.0], [119.0, 318.0], [118.0, 340.0], [117.0, 315.0], [116.0, 348.0], [123.0, 325.0], [122.0, 323.0], [121.0, 321.0], [120.0, 319.0], [127.0, 314.0], [126.0, 311.0], [125.0, 320.0], [124.0, 323.0], [135.0, 321.0], [134.0, 329.0], [133.0, 314.0], [132.0, 309.0], [131.0, 323.0], [130.0, 317.0], [129.0, 359.0], [128.0, 350.0], [142.0, 306.0], [141.0, 321.0], [140.0, 327.0], [139.0, 328.0], [138.0, 358.0], [137.0, 317.0], [136.0, 331.0], [151.0, 332.5], [150.0, 309.0], [149.0, 331.0], [148.0, 355.0], [147.0, 320.0], [146.0, 341.0], [145.0, 314.0], [144.0, 316.0], [154.0, 344.5], [159.0, 316.0], [158.0, 306.0], [157.0, 344.0], [156.0, 325.0], [155.0, 304.0], [153.0, 335.0], [152.0, 339.0], [166.0, 331.0], [165.0, 323.0], [164.0, 335.0], [163.0, 337.0], [162.0, 328.0], [161.0, 325.0], [160.0, 331.0], [175.0, 363.0], [174.0, 328.0], [173.0, 312.0], [172.0, 319.0], [171.0, 335.0], [170.0, 338.0], [169.0, 322.0], [168.0, 337.0], [176.0, 372.0], [183.0, 323.0], [182.0, 333.5], [180.0, 349.0], [179.0, 313.0], [178.0, 333.0], [177.0, 342.0], [190.0, 344.5], [191.0, 322.0], [189.0, 327.0], [188.0, 331.0], [186.0, 356.0], [185.0, 4404.0], [184.0, 323.0], [193.0, 373.0], [197.0, 465.0], [198.0, 338.0], [196.0, 312.0], [195.0, 347.0], [207.0, 377.4], [203.0, 314.0], [202.0, 344.0], [201.0, 344.0], [200.0, 353.0], [212.0, 449.0], [211.0, 398.5], [210.0, 429.0], [209.0, 382.0], [208.0, 539.0], [215.0, 336.0], [222.0, 327.6666666666667], [220.0, 327.0], [218.0, 336.6666666666667], [230.0, 321.3333333333333], [227.0, 342.0], [226.0, 321.0], [224.0, 350.5], [239.0, 342.0], [238.0, 313.5], [237.0, 335.0], [234.0, 337.0], [232.0, 334.5], [246.0, 299.0], [245.0, 342.0], [244.0, 345.5], [242.0, 331.6666666666667], [255.0, 322.0], [254.0, 314.0], [253.0, 322.0], [252.0, 304.0], [251.0, 352.0], [250.0, 355.0], [249.0, 352.0], [248.0, 339.0], [268.0, 321.0], [270.0, 321.0], [256.0, 345.3333333333333], [257.0, 334.0], [259.0, 314.0], [258.0, 331.0], [271.0, 310.0], [269.0, 340.0], [267.0, 323.3333333333333], [264.0, 1841.0], [263.0, 332.0], [262.0, 344.0], [260.0, 327.0], [275.0, 349.0], [278.0, 457.7272727272727], [276.0, 412.0], [286.0, 340.5], [284.0, 3982.0], [283.0, 327.0], [282.0, 328.5], [280.0, 336.6666666666667], [277.0, 313.0], [274.0, 333.5], [272.0, 352.0], [300.0, 297.0], [292.0, 321.0], [293.0, 328.3333333333333], [302.0, 331.5], [299.0, 354.0], [298.0, 301.0], [297.0, 331.0], [296.0, 332.0], [295.0, 334.0], [290.0, 326.0], [289.0, 332.3333333333333], [294.0, 317.0], [318.0, 666.5], [306.0, 404.62500000000006], [305.0, 334.0], [307.0, 343.0], [309.0, 346.0], [308.0, 337.0], [314.0, 525.0], [317.0, 801.5], [316.0, 532.0], [315.0, 963.0], [313.0, 673.5], [319.0, 315.0], [312.0, 329.6666666666667], [333.0, 333.0], [335.0, 326.0], [332.0, 351.0], [323.0, 336.0], [322.0, 316.0], [321.0, 353.0], [320.0, 341.0], [331.0, 352.0], [330.0, 338.0], [329.0, 335.0], [328.0, 344.0], [326.0, 309.0], [325.0, 347.0], [324.0, 354.0], [350.0, 346.0], [351.0, 341.0], [349.0, 319.0], [348.0, 337.0], [347.0, 328.5], [345.0, 328.0], [344.0, 4249.0], [343.0, 335.0], [339.0, 317.0], [338.0, 342.3333333333333], [342.0, 343.0], [341.0, 327.0], [340.0, 341.0], [366.0, 4145.0], [364.0, 747.5], [367.0, 340.0], [365.0, 345.0], [363.0, 348.0], [362.0, 357.0], [361.0, 328.0], [360.0, 334.0], [358.0, 4047.0], [353.0, 322.0], [352.0, 340.0], [355.0, 312.0], [354.0, 301.0], [357.0, 355.0], [356.0, 337.0], [383.0, 383.0], [380.0, 810.0833333333334], [379.0, 590.8], [378.0, 558.6666666666666], [377.0, 648.0], [372.0, 632.5], [375.0, 360.0], [371.0, 356.0], [369.0, 340.0], [373.0, 362.6666666666667], [382.0, 369.0], [381.0, 360.0], [376.0, 375.0], [396.0, 355.0], [395.0, 364.5], [393.0, 373.0], [392.0, 364.5], [390.0, 344.0], [389.0, 381.5], [388.0, 364.0], [386.0, 382.0], [384.0, 389.0], [414.0, 328.0], [415.0, 336.0], [413.0, 341.0], [412.0, 349.0], [411.0, 310.0], [410.0, 350.0], [409.0, 332.0], [408.0, 321.0], [407.0, 341.0], [401.0, 391.0], [400.0, 374.25], [403.0, 3656.0], [402.0, 390.0], [406.0, 329.0], [405.0, 360.0], [404.0, 374.0], [430.0, 1256.0], [431.0, 1186.0], [429.0, 2759.0], [428.0, 1195.0], [427.0, 1196.0], [426.0, 348.0], [425.0, 337.0], [424.0, 1246.0], [423.0, 798.0], [417.0, 324.0], [416.0, 322.0], [419.0, 309.0], [418.0, 344.0], [421.0, 340.0], [420.0, 835.0], [447.0, 1005.5], [445.0, 334.0], [435.0, 1206.0], [434.0, 1181.0], [433.0, 1181.0], [432.0, 381.0], [443.0, 341.0], [442.0, 354.0], [441.0, 376.0], [440.0, 512.0], [439.0, 1552.0], [438.0, 510.0], [437.0, 521.0], [436.0, 1344.0], [462.0, 1008.0], [463.0, 1201.0], [460.0, 694.0], [450.0, 1522.0], [449.0, 594.0], [448.0, 542.5], [459.0, 588.0], [458.0, 640.5], [456.0, 587.0], [455.0, 697.0], [454.0, 1048.5], [452.0, 573.5], [472.0, 776.6], [475.0, 753.3333333333334], [474.0, 886.0], [473.0, 805.0], [469.0, 716.6666666666666], [471.0, 791.5], [470.0, 802.0], [467.0, 763.0], [477.0, 2628.0], [476.0, 665.0], [479.0, 1403.0], [478.0, 2589.0], [466.0, 814.0], [465.0, 681.5], [464.0, 782.5], [494.0, 408.0], [490.0, 610.0], [489.0, 759.25], [495.0, 1019.0], [493.0, 2544.0], [492.0, 411.5], [488.0, 467.0], [486.0, 2542.0], [483.0, 2544.0], [482.0, 462.0], [481.0, 2533.0], [480.0, 2559.0], [485.0, 2547.5], [509.0, 429.0], [510.0, 411.5], [508.0, 435.0], [507.0, 2508.0], [505.0, 416.0], [504.0, 418.0], [503.0, 441.0], [502.0, 612.3333333333334], [499.0, 445.0], [497.0, 426.0], [496.0, 466.0], [519.0, 524.8], [541.0, 448.0], [543.0, 548.0], [540.0, 539.5], [539.0, 498.87499999999994], [536.0, 537.0], [537.0, 407.0], [518.0, 511.25], [517.0, 407.5], [516.0, 541.5], [515.0, 546.0], [514.0, 511.14285714285705], [513.0, 471.87500000000006], [512.0, 443.0], [532.0, 570.4000000000001], [531.0, 704.3333333333333], [533.0, 390.0], [530.0, 542.0], [529.0, 551.3333333333334], [528.0, 400.0], [527.0, 540.25], [526.0, 459.8], [524.0, 523.0], [523.0, 555.2], [522.0, 788.6666666666667], [520.0, 633.0], [521.0, 457.75], [546.0, 564.0], [556.0, 500.6], [555.0, 551.6666666666666], [553.0, 496.16666666666663], [554.0, 444.0], [551.0, 519.4], [570.0, 1061.0], [569.0, 879.6666666666666], [550.0, 558.0], [547.0, 521.3000000000001], [549.0, 416.0], [544.0, 554.6666666666666], [545.0, 385.6666666666667], [558.0, 425.0], [567.0, 922.0], [566.0, 689.0], [564.0, 388.6666666666667], [561.0, 464.0], [560.0, 412.0], [574.0, 402.25], [594.0, 394.5], [605.0, 373.0], [603.0, 359.0], [602.0, 420.5], [600.0, 387.0], [590.0, 375.0], [580.0, 426.75], [576.0, 361.5], [583.0, 451.0], [582.0, 391.0], [588.0, 379.0], [586.0, 440.0], [584.0, 736.0], [599.0, 437.5], [597.0, 378.0], [596.0, 412.0], [592.0, 434.0], [638.0, 395.5], [639.0, 375.0], [636.0, 369.3333333333333], [634.0, 365.0], [632.0, 317.0], [614.0, 391.0], [612.0, 431.0], [611.0, 409.75], [608.0, 719.5], [621.0, 402.6666666666667], [619.0, 394.0], [616.0, 391.0], [631.0, 373.0], [630.0, 381.3333333333333], [627.0, 467.4], [625.0, 387.0], [659.0, 361.0], [669.0, 304.0], [670.0, 385.0], [658.0, 357.4], [668.0, 383.5], [666.0, 370.5], [664.0, 391.0], [645.0, 363.0], [643.0, 367.0], [642.0, 384.5], [640.0, 356.0], [653.0, 368.0], [652.0, 339.0], [650.0, 406.0], [649.0, 371.0], [648.0, 371.6666666666667], [663.0, 382.0], [662.0, 351.0], [660.0, 985.0], [702.0, 348.5], [703.0, 986.0], [689.0, 351.5], [701.0, 357.5], [698.0, 366.5], [697.0, 394.0], [696.0, 336.0], [685.0, 479.0], [678.0, 455.0], [677.0, 372.0], [674.0, 371.0], [673.0, 364.0], [682.0, 611.0], [694.0, 337.0], [693.0, 337.0], [692.0, 344.0], [690.0, 347.0], [732.0, 438.0], [734.0, 497.0], [728.0, 373.5], [711.0, 449.0], [710.0, 347.0], [708.0, 431.0], [707.0, 746.0], [705.0, 367.0], [704.0, 344.5], [726.0, 474.0], [723.0, 488.3333333333333], [720.0, 394.0], [719.0, 1122.0], [718.0, 528.0], [717.0, 336.6666666666667], [715.0, 350.6666666666667], [766.0, 372.0], [767.0, 562.0], [764.0, 635.0], [763.0, 645.0], [762.0, 641.5], [760.0, 800.6666666666666], [749.0, 521.5], [737.0, 469.5], [740.0, 649.3333333333334], [738.0, 383.0], [743.0, 490.5], [741.0, 1105.0], [747.0, 436.0], [745.0, 462.5], [757.0, 641.0], [756.0, 519.6666666666666], [753.0, 428.0], [792.0, 656.0], [796.0, 646.0], [799.0, 1683.0], [785.0, 650.0], [784.0, 913.0], [788.0, 646.0], [786.0, 876.0], [798.0, 1725.0], [797.0, 1739.0], [795.0, 677.0], [794.0, 848.0], [793.0, 592.0], [783.0, 923.0], [769.0, 1072.0], [768.0, 629.0], [771.0, 622.0], [770.0, 1071.0], [773.0, 604.0], [772.0, 613.0], [775.0, 1012.0], [774.0, 1056.0], [782.0, 776.0], [780.0, 2154.0], [779.0, 2155.0], [778.0, 1003.0], [777.0, 2173.0], [776.0, 2180.0], [791.0, 642.0], [790.0, 872.0], [825.0, 710.0], [830.0, 674.0], [831.0, 640.0], [817.0, 700.0], [816.0, 750.0], [819.0, 686.0], [818.0, 701.0], [821.0, 710.0], [820.0, 728.0], [829.0, 1027.5], [827.0, 716.0], [826.0, 671.0], [824.0, 708.0], [807.0, 2428.0], [806.0, 2550.0], [805.0, 831.0], [804.0, 865.0], [803.0, 2573.0], [802.0, 1620.0], [801.0, 1658.0], [800.0, 2580.0], [815.0, 751.0], [814.0, 1468.0], [813.0, 726.0], [812.0, 1474.0], [811.0, 1501.0], [810.0, 806.0], [809.0, 2335.0], [808.0, 1549.0], [823.0, 699.0], [822.0, 712.0], [854.0, 598.0], [832.0, 629.0], [884.0, 1333.0], [894.0, 333.0], [895.0, 1644.0], [881.0, 1337.0], [880.0, 333.0], [883.0, 344.0], [882.0, 327.0], [893.0, 327.5], [891.0, 336.3333333333333], [889.0, 336.0], [867.0, 2043.0], [879.0, 357.0], [878.0, 344.0], [877.0, 342.0], [876.0, 364.0], [875.0, 476.63414634146346], [887.0, 345.0], [886.0, 1599.0], [885.0, 315.0], [924.0, 1052.0], [927.0, 1375.0], [913.0, 1505.5], [915.0, 1431.0], [914.0, 1835.0], [917.0, 516.0], [916.0, 1428.0], [926.0, 1042.0], [925.0, 1048.0], [923.0, 1073.0], [922.0, 1460.0], [921.0, 1467.0], [920.0, 1096.0], [911.0, 434.0], [896.0, 1530.0], [898.0, 1265.0], [897.0, 1543.0], [900.0, 1500.0], [899.0, 344.0], [910.0, 1447.0], [909.0, 949.5], [907.0, 344.0], [906.0, 1471.0], [905.0, 1282.2], [919.0, 1134.0], [918.0, 383.0], [953.0, 1428.0], [957.0, 1481.0], [958.0, 698.0], [945.0, 1272.0], [944.0, 1241.5], [947.0, 852.0], [946.0, 1242.0], [949.0, 1619.0], [948.0, 1211.0], [956.0, 1406.0], [955.0, 998.0], [954.0, 1389.0], [952.0, 1439.0], [935.0, 932.0], [934.0, 1225.0], [933.0, 933.0], [932.0, 952.0], [931.0, 954.0], [930.0, 949.0], [929.0, 975.0], [928.0, 991.0], [943.0, 1244.0], [942.0, 1249.0], [941.0, 1585.0], [939.0, 1140.0], [938.0, 924.0], [937.0, 933.0], [936.0, 1301.0], [951.0, 1567.0], [950.0, 816.0], [989.0, 971.0], [991.0, 1044.5], [976.0, 1414.0], [978.0, 1421.25], [977.0, 1413.0], [988.0, 1165.0], [987.0, 1401.0], [986.0, 1407.0], [985.0, 1408.0], [975.0, 1310.6666666666667], [966.0, 1423.5], [962.0, 1379.0], [961.0, 1402.6666666666667], [969.0, 1425.6666666666667], [983.0, 1412.0], [982.0, 1400.0], [980.0, 1403.0], [979.0, 1118.0], [996.0, 1157.0], [995.0, 899.0], [994.0, 1159.0], [993.0, 950.0], [992.0, 969.0], [1.0, 311.0]], "isOverall": false, "label": "Post Request", "isController": false}, {"data": [[489.05733005732935, 608.3988533988537]], "isOverall": false, "label": "Post Request-Aggregated", "isController": false}, {"data": [[35.0, 6373.0], [45.0, 5648.25], [44.0, 6099.857142857143], [46.0, 2461.5714285714284], [47.0, 5430.8], [49.0, 5401.875], [48.0, 5432.5], [51.0, 5398.0], [54.0, 5397.0], [56.0, 5346.0], [58.0, 5335.0], [70.0, 6466.0], [74.0, 5316.5], [72.0, 6098.0], [83.0, 5197.5], [81.0, 5243.5], [87.0, 5097.0], [84.0, 5166.0], [91.0, 5074.071428571428], [90.0, 5406.833333333333], [94.0, 4366.125], [92.0, 4986.5], [99.0, 4887.5], [97.0, 4860.0], [96.0, 4873.5], [103.0, 5003.571428571428], [101.0, 4797.0], [100.0, 5906.5], [105.0, 4974.666666666666], [111.0, 5520.0], [109.0, 5228.5], [122.0, 277.2083333333333], [124.0, 319.8], [135.0, 284.0], [144.0, 382.7142857142857], [145.0, 2890.6666666666665], [151.0, 393.25], [150.0, 503.0], [149.0, 3947.0], [147.0, 3958.0], [146.0, 4789.333333333333], [153.0, 2792.6666666666665], [158.0, 353.25], [157.0, 4258.0], [156.0, 3906.4], [155.0, 4026.0], [154.0, 4674.0], [166.0, 3897.75], [165.0, 4382.0], [164.0, 3875.8333333333335], [160.0, 4038.75], [174.0, 3769.0], [168.0, 3778.5], [176.0, 1495.5], [183.0, 378.3333333333333], [180.0, 4784.0], [187.0, 173.0], [190.0, 172.0], [189.0, 4738.0], [193.0, 2986.0], [196.0, 196.0], [198.0, 4659.0], [207.0, 273.0], [202.0, 4654.0], [201.0, 4292.0], [200.0, 4281.0], [211.0, 2395.5], [210.0, 402.5], [208.0, 312.5], [230.0, 1203.0], [227.0, 449.6666666666667], [244.0, 1335.0], [242.0, 580.3333333333334], [254.0, 4674.0], [270.0, 4621.5], [265.0, 4596.0], [263.0, 4610.0], [260.0, 4680.0], [259.0, 4615.0], [278.0, 415.99999999999994], [276.0, 360.0], [282.0, 4568.0], [277.0, 4618.0], [302.0, 3457.0], [299.0, 4473.0], [293.0, 4490.0], [314.0, 540.8], [306.0, 442.3333333333333], [318.0, 728.5], [317.0, 774.8333333333333], [316.0, 826.3333333333334], [315.0, 763.0], [313.0, 990.0], [312.0, 817.5], [334.0, 337.8], [330.0, 804.0], [332.0, 4462.0], [329.0, 4472.0], [323.0, 4488.0], [320.0, 4487.5], [350.0, 117.0], [345.0, 942.0], [351.0, 4398.0], [348.0, 4428.0], [366.0, 3863.2], [361.0, 2960.714285714286], [360.0, 3103.0], [359.0, 317.0], [358.0, 2417.5], [357.0, 4349.0], [367.0, 3932.666666666666], [365.0, 3905.5], [364.0, 3534.0], [354.0, 4364.0], [353.0, 4294.090909090908], [363.0, 3866.0], [362.0, 3918.0], [381.0, 3594.0909090909095], [376.0, 351.3333333333333], [380.0, 825.5714285714288], [369.0, 3697.0], [379.0, 658.75], [378.0, 2739.714285714286], [377.0, 756.0833333333334], [382.0, 4075.0], [375.0, 3939.0], [373.0, 4110.0], [390.0, 4196.0], [389.0, 3441.5], [384.0, 3649.833333333333], [413.0, 3532.2], [415.0, 3729.5], [412.0, 3614.1666666666665], [402.0, 3539.8], [401.0, 3418.5], [400.0, 3335.0], [411.0, 3576.4285714285716], [410.0, 3468.8571428571427], [409.0, 3156.0], [408.0, 4138.0], [407.0, 3345.666666666667], [406.0, 3372.5], [405.0, 3344.5], [404.0, 3455.3999999999996], [418.0, 3440.75], [428.0, 3266.833333333333], [422.0, 1940.5], [426.0, 3985.0], [424.0, 3927.3333333333335], [423.0, 3730.2], [416.0, 3379.0], [421.0, 3223.5], [420.0, 3342.0], [419.0, 3108.0], [446.0, 3063.0], [443.0, 3042.0], [437.0, 3339.0], [435.0, 3830.0], [432.0, 3291.8], [465.0, 1882.625], [469.0, 900.0], [477.0, 2635.6923076923076], [479.0, 2997.0], [478.0, 2982.8], [476.0, 2987.0], [466.0, 2981.0], [464.0, 2990.75], [491.0, 1421.5], [489.0, 1495.2], [487.0, 1519.5], [486.0, 2889.0], [502.0, 1840.0], [497.0, 2968.0], [512.0, 1039.0], [514.0, 975.0], [522.0, 1387.6], [529.0, 909.0], [534.0, 1063.0], [539.0, 716.0], [523.0, 1329.0], [521.0, 1374.8333333333335], [544.0, 1261.0], [546.0, 962.0], [549.0, 1045.6666666666667], [554.0, 783.0], [556.0, 1190.1904761904764], [570.0, 2581.0], [576.0, 2768.0], [669.0, 2693.0], [668.0, 2540.0], [682.0, 2421.0], [673.0, 2454.0], [797.0, 1952.0], [798.0, 1934.3333333333333], [785.0, 2496.0], [784.0, 2480.2758620689656], [796.0, 2334.1290322580644], [795.0, 2690.833333333333], [794.0, 2844.5384615384614], [793.0, 2712.5714285714284], [792.0, 2861.727272727273], [775.0, 2397.75], [783.0, 2526.0], [782.0, 2201.0], [780.0, 2748.190476190476], [779.0, 3355.0], [778.0, 3377.0], [777.0, 2401.0], [791.0, 3064.153846153846], [788.0, 2206.0], [813.0, 1604.0], [822.0, 2125.0], [820.0, 2505.0], [814.0, 1622.0], [801.0, 1815.7142857142856], [800.0, 1909.0], [803.0, 2063.3333333333335], [802.0, 2041.111111111111], [812.0, 2405.0], [811.0, 1714.2222222222222], [810.0, 1975.6666666666667], [808.0, 2166.0], [807.0, 1758.0], [806.0, 1761.0], [832.0, 1473.0], [895.0, 1326.5], [894.0, 1335.5], [887.0, 1831.0], [880.0, 1744.0], [875.0, 1593.4285714285716], [923.0, 1657.3333333333333], [925.0, 2141.0], [926.0, 1774.7142857142856], [924.0, 1694.0], [922.0, 1729.0], [920.0, 1990.1666666666667], [919.0, 1817.4545454545453], [918.0, 1895.142857142857], [911.0, 867.5], [899.0, 978.0], [898.0, 963.5], [910.0, 870.0], [906.0, 1074.1666666666665], [905.0, 1045.7777777777776], [952.0, 1399.0], [951.0, 1422.5], [946.0, 1501.0], [945.0, 1511.0], [937.0, 1567.0], [929.0, 1580.25], [928.0, 1587.0], [988.0, 1098.8], [987.0, 1120.6], [986.0, 1219.5], [979.0, 1251.0], [977.0, 1289.0], [975.0, 1248.0], [969.0, 1267.0], [996.0, 1934.0], [994.0, 2050.5]], "isOverall": false, "label": "get Request", "isController": false}, {"data": [[511.47993447993497, 2414.153153153155]], "isOverall": false, "label": "get Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 996.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6898.65, "minX": 1.66782132E12, "maxY": 34783.45, "series": [{"data": [[1.66782132E12, 34783.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66782132E12, 6898.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66782132E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 608.3988533988537, "minX": 1.66782132E12, "maxY": 2414.153153153155, "series": [{"data": [[1.66782132E12, 608.3988533988537]], "isOverall": false, "label": "Post Request", "isController": false}, {"data": [[1.66782132E12, 2414.153153153155]], "isOverall": false, "label": "get Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66782132E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 608.3882063882066, "minX": 1.66782132E12, "maxY": 2414.1416871416864, "series": [{"data": [[1.66782132E12, 608.3882063882066]], "isOverall": false, "label": "Post Request", "isController": false}, {"data": [[1.66782132E12, 2414.1416871416864]], "isOverall": false, "label": "get Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66782132E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66782132E12, "maxY": 1728.793611793612, "series": [{"data": [[1.66782132E12, 0.0]], "isOverall": false, "label": "Post Request", "isController": false}, {"data": [[1.66782132E12, 1728.793611793612]], "isOverall": false, "label": "get Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66782132E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 67.0, "minX": 1.66782132E12, "maxY": 6926.0, "series": [{"data": [[1.66782132E12, 6926.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66782132E12, 3819.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66782132E12, 5463.5999999999985]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66782132E12, 4659.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66782132E12, 67.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66782132E12, 805.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66782132E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 336.5, "minX": 109.0, "maxY": 4766.0, "series": [{"data": [[135.0, 361.0], [291.0, 2125.0], [638.0, 656.0], [425.0, 352.0], [109.0, 4766.0], [229.0, 1272.0], [239.0, 663.0], [252.0, 826.0], [124.0, 341.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[425.0, 336.5], [252.0, 971.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 638.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 336.5, "minX": 109.0, "maxY": 4766.0, "series": [{"data": [[135.0, 361.0], [291.0, 2124.0], [638.0, 656.0], [425.0, 352.0], [109.0, 4766.0], [229.0, 1272.0], [239.0, 663.0], [252.0, 826.0], [124.0, 341.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[425.0, 336.5], [252.0, 971.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 638.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 40.7, "minX": 1.66782132E12, "maxY": 40.7, "series": [{"data": [[1.66782132E12, 40.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66782132E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.66782132E12, "maxY": 20.35, "series": [{"data": [[1.66782132E12, 20.35]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66782132E12, 20.3]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.66782132E12, 0.05]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66782132E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.66782132E12, "maxY": 20.35, "series": [{"data": [[1.66782132E12, 20.3]], "isOverall": false, "label": "Post Request-success", "isController": false}, {"data": [[1.66782132E12, 0.05]], "isOverall": false, "label": "Post Request-failure", "isController": false}, {"data": [[1.66782132E12, 20.35]], "isOverall": false, "label": "get Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66782132E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.66782132E12, "maxY": 40.65, "series": [{"data": [[1.66782132E12, 40.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66782132E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66782132E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

